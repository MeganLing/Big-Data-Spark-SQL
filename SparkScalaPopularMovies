package edu.wm.xling

import org.apache.spark._
import org.apache.spark.SparkContext._
import org.apache.spark.sql._
import org.apache.log4j._
import scala.io.Source
import java.nio.charset.CodingErrorAction
import scala.io.Codec
import org.apache.spark.sql.functions._
import java.io._

/** Find the movies with the most ratings. */
object PopularMovies {
  
  /** Load up a Map of movie IDs to movie names. */
  def loadMovieNames() : Map[Int, String] = {
    
    // Handle character encoding issues:
    implicit val codec = Codec("UTF-8")
    codec.onMalformedInput(CodingErrorAction.REPLACE)
    codec.onUnmappableCharacter(CodingErrorAction.REPLACE)

    // Create a Map of Ints to Strings, and populate it from u.item.
    var movieNames:Map[Int, String] = Map()
    
     val lines = Source.fromFile("../ml-100k/u.item").getLines()
     for (line <- lines) {
       var fields = line.split('|')
       if (fields.length > 1) {
        movieNames += (fields(0).toInt -> fields(1))
       }
     }
    
     return movieNames
  }
 
  // Case class so we can get a column name for our movie ID
  final case class MovieRating(movieID: Int, rating:Float, count:Int)
  
  /** Our main function where the action happens */
  def main(args: Array[String]) {
   
    // Set the log level to only print errors
    Logger.getLogger("org").setLevel(Level.ERROR)
    
    // Use new SparkSession interface in Spark 2.0
    val spark = SparkSession
      .builder
      .appName("Q1") 
      .master("local[*]")
      .config("spark.sql.warehouse.dir", "file:///C:/temp") // Necessary to work around a Windows bug in Spark 2.0.0; omit if you're not on Windows.
      .getOrCreate()
      
    // Read in each rating line and extract the movie ID, rating; construct an RDD of Movie objects.
    val lines = spark.sparkContext.textFile("../ml-100k/u.data").map(x => x.split("\t")).map(x =>MovieRating(x(1).toInt, x(2).toFloat,1))
    
    // Convert to a DataSet
    import spark.implicits._
    val movieRatingDS = lines.toDS().cache()
    
    // Some SQL-style magic start now
    
    val movieAvgCount = movieRatingDS.groupBy("movieID").agg(avg("rating"), sum("count"))
    
    val movieFilted = movieAvgCount.filter(movieAvgCount("sum(count)") >= 100)
    
    val movieSorted = movieFilted.orderBy("avg(rating)").cache()
    
    val names = loadMovieNames()

    val file = "Q1.txt"
    
    val writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file)))
    for (x <- movieSorted.collect()) {
      val output = names(x(0).asInstanceOf[Int]) + ": " + x(1) + "|" + x(2)  + "\n"
      writer.write(output)
    }
    writer.close()
  }
}
